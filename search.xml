<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo快速开始</title>
      <link href="/2021/0814/ebeb7b66.html"/>
      <url>/2021/0814/ebeb7b66.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Python+selenium实现自动填写表单</title>
      <link href="/2021/0814/df93fdb0.html"/>
      <url>/2021/0814/df93fdb0.html</url>
      
        <content type="html"><![CDATA[<h1 id="基于Python-selenium实现自动填写表单"><a href="#基于Python-selenium实现自动填写表单" class="headerlink" title="基于Python+selenium实现自动填写表单"></a>基于Python+selenium实现自动填写表单</h1><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>&emsp;&emsp;在实际工作中，经常会遇到这样的需求——将客户信息录入公司内部的后台管理系统。如果客户信息少的话，人工录入似乎也没什么问题。然而，当客户信息很多时，如果还是人工录入的话，显然耗时耗力，甚至会意外导致客户信息录入错误。<font color="red">为了避免繁琐、重复的操作步骤，同时避免不必要的错误，我们可以借助Python和selenium写一个自动化脚本来满足这一需求！</font></p><h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><blockquote><ol><li>安装Python语言（建议使用Anaconda方式进行安装，下面介绍基于此方式）；  </li><li>安装selenium库，使用命令<code>pip install selenium</code>；  </li><li>安装与浏览器版本相对应的浏览器驱动程序，以Google浏览器为例：<blockquote><p>1） 查看浏览器版本号：打开Google浏览器，在地址栏输入<code>chrome://version/</code>，便可以查看到浏览器的版本号，下图中红色矩形框中的便是版本号：<br><img src="https://s1.imagehub.cc/images/2021/01/06/1.png" alt="浏览器版本号查看示例"><br>2） 下载Google浏览器对应版本的驱动程序，下载地址为<a href="https://chromedriver.storage.googleapis.com/index.html">https://chromedriver.storage.googleapis.com/index.html</a><br>3） 将下载的驱动文件解压，并将里面的<code>chromedriver.exe</code>程序放置到Anaconda安装目录的Scripts文件夹下，以笔者的为例：<code>D:\ProgramData\Anaconda3\Scripts</code></p></blockquote></li></ol></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote><p>完成了工具准备以后，便可以开始使用代码实现需求了，以百度自动搜索selenium为例，请看示例代码：</p></blockquote><pre><code># encoding=utf8from selenium import webdriverfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilitiesimport time# 前台开启浏览器模式def openChrome():    # 加启动配置    option = webdriver.ChromeOptions()    option.add_argument(&#39;disable-infobars&#39;)    # 打开chrome浏览器    driver = webdriver.Chrome(chrome_options=option)    return driver# 授权操作def operationAuth(driver):    url = &quot;http://www.baidu.com&quot;    driver.get(url)    # 找到输入框并输入查询内容    elem = driver.find_element_by_id(&quot;kw&quot;)    elem.send_keys(&quot;selenium&quot;)    # 提交表单    driver.find_element_by_xpath(&quot;//*[@id=&#39;su&#39;]&quot;).click()    print(&#39;查询操作完毕！&#39;)# 方法主入口if __name__ == &#39;__main__&#39;:    # 加启动配置    driver = openChrome()    operationAuth(driver)</code></pre><blockquote><p>一些命令的说明：</p><blockquote><p><code>driver.get(url)</code>：使用浏览器打开目标url；<br><code>driver.find_element_by_id(&quot;kw&quot;)</code>： 根据网页标签中HTML元素的id属性进行元素定位，本示例中定位的依据是百度搜索引擎搜索框的id，即字符串<code>kw</code>；<br><code>elem.send_keys(&quot;selenium&quot;)</code>： 向搜索框中填入搜索关键字<code>selenium</code>；<br><code>driver.find_element_by_xpath(&quot;//*[@id=&#39;su&#39;]&quot;).click()</code>： 一种新的定位元素的方式，基于xpath进行定位，这句代码前一部分是定位到了“百度一下”那个按钮，后一部分是点击操作，模拟用户的点击行为。<br><img src="https://s1.imagehub.cc/images/2021/01/06/8c13c9f03678de1f75ebdfd6aab246d4.png" alt="代码定位元素示例"><br><strong>说明：</strong>对于使用xpath方式定位，如何获取HTML元素的xpath问题，打开目标页面，按F12或右键—检查，然后用鼠标定位到目标元素，在浏览器的Elements视口中，右键目标元素—copy—copy-XPath便可以获取目标元素的XPath值。<br><img src="https://s1.imagehub.cc/images/2021/01/06/xpath.gif" alt="获取xpath教程.gif"></p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web自动化 </tag>
            
            <tag> Python </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统下mongoDB安装教程</title>
      <link href="/2021/0118/8e30dd64.html"/>
      <url>/2021/0118/8e30dd64.html</url>
      
        <content type="html"><![CDATA[<h1 id="Windows系统下mongoDB安装教程"><a href="#Windows系统下mongoDB安装教程" class="headerlink" title="Windows系统下mongoDB安装教程"></a>Windows系统下mongoDB安装教程</h1><p>&emsp;&emsp;MongoDB是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。在高负载的情况下，添加更多的节点，可以保证服务器性能。<br>&emsp;&emsp;MongoDB旨在为WEB应用提供可扩展的高性能数据存储解决方案。它将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB文档类似于JSON对象。字段值可以包含其他文档，数组及文档数组。</p><h2 id="MongoDB下载"><a href="#MongoDB下载" class="headerlink" title="MongoDB下载"></a>MongoDB下载</h2><blockquote><p>&emsp;&emsp;根据自己机器的配置选择合适的版本，从mongoDB官网下载安装包，下载地址为<a href="https://www.mongodb.com/try/download/community?jmp=nav">https://www.mongodb.com/try/download/community?jmp=nav</a>。<br><img src="https://s1.imagehub.cc/images/2021/01/18/001.png" alt="下载界面"></p></blockquote><h2 id="mongoDB安装"><a href="#mongoDB安装" class="headerlink" title="mongoDB安装"></a>mongoDB安装</h2><blockquote><p>&emsp;&emsp;1. 官网下载得到MongoDB安装包.msi文件，双击文件启动安装向导，界面如图所示：<br><img src="https://s1.imagehub.cc/images/2021/01/18/1.png" alt="安装向导1"><br>&emsp;&emsp;2. 直接next；<br>&emsp;&emsp;3. 勾选接受协议，点击next；<br><img src="https://s1.imagehub.cc/images/2021/01/18/2.png" alt="安装向导2"><br>&emsp;&emsp;4. 选择自定义安装，如图红色箭头所示；<br><img src="https://s1.imagehub.cc/images/2021/01/18/3.png" alt="安装向导3"><br>&emsp;&emsp;5. 根据自己的情况选择是否更改安装路径；<br><img src="https://s1.imagehub.cc/images/2021/01/18/4.png" alt="安装向导4"><br>&emsp;&emsp;6. 从MongoDB 4.0开始，您可以在安装期间将MongoDB设置为服务，或者只安装二进制文件。</p><blockquote><h3 id="MongoDB服务"><a href="#MongoDB服务" class="headerlink" title="MongoDB服务"></a>MongoDB服务</h3><p>以下是安装和配置MongoDB作为服务。<br>从MongoDB 4.0开始，您可以在安装期间配置和启动MongoDB作为服务，并在成功安装后启动MongoDB服务。<br><img src="https://s1.imagehub.cc/images/2021/01/18/5.png" alt="安装向导5"><br>选择将MongoD安装为服务。<br>Run the service as Network Service user以网络服务用户身份运行服务（默认）,这是Windows内置的Windows用户帐户。<br>或者Run the service as a local or domain user以本地或域用户身份运行服务：  </p><ul><li>对于现有的本地用户帐户，请指定一个句点作为帐户域（即.），并为该用户指定帐户名称和帐户密码。</li><li>对于现有域用户，请为该用户指定“帐户域”，“帐户名”和“帐户密码”。  </li></ul><p><strong>服务名称：</strong>指定服务名称。默认名称是MongoDB。如果您已拥有具有指定名称的服务，则必须选择另一个名称。<br><strong>数据目录：</strong>指定数据目录，对应于 –dbpath。如果该目录不存在，安装程序将创建该目录并设置对服务用户的目录访问权限。<br><strong>日志目录：</strong>指定日志目录，该目录对应于 –logpath。如果该目录不存在，安装程序将创建该目录并设置对服务用户的目录访问权限。</p><h3 id="只安装MongoDB"><a href="#只安装MongoDB" class="headerlink" title="只安装MongoDB"></a>只安装MongoDB</h3><p>以下仅安装MongoDB，不将MongoDB配置为服务。<br>如果您选择不将MongoDB配置为服务，请取消选中Install MongoD as a Service。<br><img src="https://s1.imagehub.cc/images/2021/01/18/002.png" alt="002.png"></p></blockquote><p>&emsp;&emsp;7.安装MongoDB Compass(界面化数据库管理工具)。对于Windows 8或更高版本，您可以让向导安装 MongoDB Compass。要安装Compass，请选择Install MongoDB Compass（默认）。<br><img src="https://s1.imagehub.cc/images/2021/01/18/6.png" alt="6.png"><br>&emsp;&emsp;8.点击next，下面默认运行即可完成MongoDB。</p></blockquote><h2 id="MongoDB配置"><a href="#MongoDB配置" class="headerlink" title="MongoDB配置"></a>MongoDB配置</h2><blockquote><ol><li>创建C:\Program Files\MongoDB\data\log目录，用来存放日志文件；  </li><li>在C:\Program Files\MongoDB\data\log目录里新建mongodb.log，用来存放日志信息；  </li><li>创建C:\Program Files\MongoDB\data\db目录，用来存放数据库数据，</li><li>并在D:\mongodb目录下创建mongo.config，在文件内部复制如下文本：</li></ol></blockquote><pre><code>##数据文件  此处=后对应到数据所存放的目录dbpath=C:\Program Files\MongoDB\data\db##日志文件  此处=后对应到日志文件所在路径logpath=C:\Program Files\MongoDB\data\log\mongodb.log##错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件logappend=true #启用日志文件，默认启用journal=true #这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为falsequiet=true #端口号 默认为27017port=27017 </code></pre><h2 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h2><p>进入MongoDB安装目录的bin目录下，运行mongod.exe，如果闪一下退出就说明安装成功。在浏览器窗口输入<code>localhost:27017</code>，会出现下图：<br><img src="https://s1.imagehub.cc/images/2021/01/18/7.png" alt="7.png"></p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoDB </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 软件安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS动画之transform</title>
      <link href="/2020/1219/9f5fc182.html"/>
      <url>/2020/1219/9f5fc182.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS动画之transform"><a href="#CSS动画之transform" class="headerlink" title="CSS动画之transform"></a>CSS动画之transform</h1><blockquote><p>&emsp;&emsp;CSS 的 <code>transform</code> 属性用来给元素添加一些变形效果，主要包括改变元素的位置或形状，同时不影响页面的布局。使用 <code>transform</code> 我们可以实现一些非常炫酷的效果，比如纯CSS实现的钟表、立方体的旋转等，以提升用户体验。</p></blockquote><h2 id="平移translate"><a href="#平移translate" class="headerlink" title="平移translate"></a>平移translate</h2><blockquote><p>&emsp;&emsp;使用平移 <code>translate</code> 可以改变元素的位置。<br><strong>可选值有：</strong></p><blockquote><p><code>translateX()</code>：元素沿着 x 轴方向平移；<br><code>translateY()</code>：元素沿着 y 轴方向平移；<br><code>translateZ()</code>：元素沿着 z 轴方向平移；<br>其中，平移的单位可以是像素值 px 或百分比。<font color=orange>需要注意的是如果设置百分比的话，元素的平移量是相对于元素自身尺寸进行的。</font></p></blockquote></blockquote><blockquote><p><strong>应用：</strong>使用平移效果可以实现在元素尺寸由内容撑开时元素的水平、垂直居中效果。<br><strong>语法</strong>：</p><blockquote><p>沿着 x 轴方向平移 <code>transform:translateX(平移量)</code>；<br>沿着 y 轴方向平移 <code>transform:translateY(平移量)</code>；<br>沿着 z 轴方向平移 <code>transform:translateZ(平移量)</code>；</p></blockquote></blockquote><blockquote><p><strong>实例1：</strong>元素沿着 x 轴从父元素的左侧平移到右侧。<br>效果为：<br><img src="https://s1.imagehub.cc/images/2020/12/19/translateX.gif" alt="平移实例效果图"><br>参考代码为：  </p></blockquote><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;平移Translate实例&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 600px;            height: 320px;            margin: 50px auto;            border: 5px #333 solid;        &#125;        .box1&#123;            width: 200px;            height: 200px;            background: #bfa;            transition: .5s;        &#125;        .box:hover .box1&#123;            transform: translateX(400px);        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="旋转rotate"><a href="#旋转rotate" class="headerlink" title="旋转rotate"></a>旋转rotate</h2><blockquote><p>&emsp;&emsp;使用旋转 <code>rotate</code> 可以改变元素的位置，可以调整元素的显示角度，以实现 3D 效果。<br><strong>可选值有：</strong></p><blockquote><p><code>rotateX()</code>：元素沿着 x 轴方向旋转；<br><code>rotateY()</code>：元素沿着 y 轴方向旋转；<br><code>rotateZ()</code>：元素沿着 z 轴方向旋转；<br>其中，旋转的单位可以是度 deg 或圈数 (turn)。当元素设置旋转效果时，是否显示元素的背面，可以使用 <code>backface-visibility</code> 来设置，可选值为 <code>hidden</code> 和 <code>visible</code>。<font color=orange>需要注意的是：每个元素自身都有一个坐标轴，一开始都处于默认状态，旋转会改变坐标轴x、y、z轴的方向。因此在与平移结合使用时需要特别注意。</font></p></blockquote></blockquote><blockquote><p><strong>应用：</strong>使用旋转效果可以实现模拟钟表等应用。<br><strong>语法</strong>：</p><blockquote><p>沿着 x 轴方向旋转 <code>transform:rotateX(旋转角度)</code>；<br>沿着 y 轴方向旋转 <code>transform:rotateY(旋转角度)</code>；<br>沿着 z 轴方向旋转 <code>transform:rotateZ(旋转角度)</code>；</p></blockquote></blockquote><blockquote><p><strong>实例2：</strong>元素沿着 z 轴旋转45度。<br>效果为：<br><img src="https://s1.imagehub.cc/images/2020/12/19/rotate.gif" alt="旋转效果图"><br>参考代码为：  </p></blockquote><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;旋转rotate实例&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 600px;            height: 320px;            margin: 50px auto;            border: 5px #333 solid;            overflow: hidden;        &#125;        .box1&#123;            width: 200px;            height: 200px;            margin: 60px auto;            background: #bfa;            transition: .5s;        &#125;        .box:hover .box1&#123;            /* transform: rotateZ(45deg); */ /* 这两种设置方式都可以 */            transform: rotateZ(0.125turn);        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="缩放scale"><a href="#缩放scale" class="headerlink" title="缩放scale"></a>缩放scale</h2><blockquote><p>&emsp;&emsp;使用缩放 <code>scale</code> 可以改变元素的形状尺寸。<br><strong>可选值有：</strong></p><blockquote><p><code>scaleX()</code>：元素沿着 x 轴方向缩放；<br><code>scaleY()</code>：元素沿着 y 轴方向缩放；<br><code>scale()</code>：元素沿着 x,y 轴双方向缩放；<br><code>scaleZ()</code>：元素沿着 z 轴方向缩放，但这个值用的比较少，如果用了的话要配合 3D 效果才能显示出效果；<br>其中，旋转的单位可以是度 deg 或圈数 (turn)。当元素设置旋转效果时，是否显示元素的背面，可以使用 <code>backface-visibility</code> 来设置，可选值为 <code>hidden</code> 和 <code>visible</code>。<font color=orange>需要注意的是：每个元素自身都有一个坐标轴，一开始都处于默认状态，旋转会改变坐标轴x、y、z轴的方向。因此在与平移结合使用时需要特别注意。</font></p></blockquote></blockquote><blockquote><p><strong>应用：</strong>使用旋转效果可以实现模拟钟表等应用。<br><strong>语法</strong>：</p><blockquote><p>沿着 x 轴方向缩放 <code>transform:scaleX(缩放比例)</code>；<br>沿着 y 轴方向缩放 <code>transform:scaleY(缩放比例)</code>；<br>沿着 x,y 轴双方向缩放 <code>transform:scale(缩放比例)</code>；</p></blockquote></blockquote><blockquote><p><strong>实例3：</strong>元素沿着 x 轴放大2倍。<br>效果为：<br><img src="https://s1.imagehub.cc/images/2020/12/19/scaleX.gif" alt="缩放效果图"><br>参考代码为：  </p></blockquote><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;旋转rotate实例&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 600px;            height: 320px;            margin: 50px auto;            border: 5px #333 solid;            overflow: hidden;        &#125;        .box1&#123;            width: 200px;            height: 200px;            margin: 60px auto;            background: #bfa;            transition: .5s;        &#125;        .box:hover .box1&#123;            transform: scaleX(2)        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="transform参考原点"><a href="#transform参考原点" class="headerlink" title="transform参考原点"></a>transform参考原点</h2><blockquote><p>&emsp;&emsp;变形效果的原点使用 <code>transform-origin</code> 来设置。默认情况下，变形效果的原点是元素的中心，也就是值为 <code>center</code>。<br><strong>可选值为：</strong></p><blockquote><p>center 默认值，变形效果参考原点为元素的中心；<br>使用方位词 <code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code> 及其组合，如果是单一方位词，则第二个值默认是center；<br>使用像素值指定；</p></blockquote></blockquote><blockquote><p><strong>语法：</strong> <code>transform-origin: value1 value2</code>。</p></blockquote><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="练习1：使用旋转实现钟表。"><a href="#练习1：使用旋转实现钟表。" class="headerlink" title="练习1：使用旋转实现钟表。"></a>练习1：使用旋转实现钟表。</h3><p>&emsp;&emsp;最终效果为<br><img src="https://s1.imagehub.cc/images/2020/12/19/clock.gif" alt="钟表效果图"><br>&emsp;&emsp;练习图片资源<a href="https://s1.imagehub.cc/images/2020/12/19/bg.png">下载</a><br>&emsp;&emsp;参考代码：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;CSS Clock&lt;/title&gt;&lt;/head&gt;&lt;style&gt;    .clock &#123;        width: 400px;        height: 400px;        margin: 100px auto;        border-radius: 50%;        border: 5px #000 solid;        position: relative;        background-image: url(./img/img/13/bg.png);        background-size: cover;    &#125;    .hour-wrapper &#123;        width: 250px;        height: 250px;        position: absolute;        left: 0;        right: 0;        top: 0;        bottom: 0;        margin: auto;        animation: run 1440s infinite;    &#125;    .hour &#123;        width: 6px;        height: 50%;        background: rgb(15, 15, 15);        margin: 0 auto;    &#125;    .min-wrapper &#123;        width: 300px;        height: 300px;        position: absolute;        left: 0;        right: 0;        top: 0;        bottom: 0;        margin: auto;        animation: run 120s infinite;    &#125;    .min &#123;        width: 4px;        height: 50%;        background: rgb(37, 182, 102);        margin: 0 auto;    &#125;    .sec-wrapper &#123;        width: 350px;        height: 350px;        position: absolute;        left: 0;        right: 0;        top: 0;        bottom: 0;        margin: auto;        animation: run 2s infinite steps(60);    &#125;    .sec &#123;        width: 2px;        height: 50%;        background: rgb(122, 24, 202);        margin: 0 auto;    &#125;    @keyframes run &#123;        from&#123;            transform: rotateZ(0);        &#125;        to&#123;            transform: rotateZ(360deg);        &#125;    &#125;&lt;/style&gt;&lt;body&gt;    &lt;div class=&quot;clock&quot;&gt;        &lt;!-- 设置时针 --&gt;        &lt;div class=&quot;hour-wrapper&quot;&gt;            &lt;div class=&quot;hour&quot;&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;!-- 设置分针 --&gt;        &lt;div class=&quot;min-wrapper&quot;&gt;            &lt;div class=&quot;min&quot;&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;!-- 设置秒针 --&gt;        &lt;div class=&quot;sec-wrapper&quot;&gt;            &lt;div class=&quot;sec&quot;&gt;&lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="练习2：使用6张复仇者联盟图片构建一个立方体，并实现立方体的旋转。"><a href="#练习2：使用6张复仇者联盟图片构建一个立方体，并实现立方体的旋转。" class="headerlink" title="练习2：使用6张复仇者联盟图片构建一个立方体，并实现立方体的旋转。"></a>练习2：使用6张复仇者联盟图片构建一个立方体，并实现立方体的旋转。</h3><p>&emsp;&emsp;最终效果为<br><img src="https://s1.imagehub.cc/images/2020/12/19/d3da0d250109aa354aae27a56914fc43.gif" alt="复仇者联盟立方体旋转效果图"><br>&emsp;&emsp;练习图片资源下载：  </p><ul><li>图片一： <a href="https://s1.imagehub.cc/images/2020/12/19/1.jpg">https://s1.imagehub.cc/images/2020/12/19/1.jpg</a>；  </li><li>图片二： <a href="https://s1.imagehub.cc/images/2020/12/19/2.jpg">https://s1.imagehub.cc/images/2020/12/19/2.jpg</a>；  </li><li>图片三： <a href="https://s1.imagehub.cc/images/2020/12/19/3.jpg">https://s1.imagehub.cc/images/2020/12/19/3.jpg</a>；  </li><li>图片四： <a href="https://s1.imagehub.cc/images/2020/12/19/4.jpg">https://s1.imagehub.cc/images/2020/12/19/4.jpg</a>；  </li><li>图片五： <a href="https://s1.imagehub.cc/images/2020/12/19/5.jpg">https://s1.imagehub.cc/images/2020/12/19/5.jpg</a>；  </li><li>图片六： <a href="https://s1.imagehub.cc/images/2020/12/19/6.jpg">https://s1.imagehub.cc/images/2020/12/19/6.jpg</a>  </li></ul><p>&emsp;&emsp;参考代码：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;立方体旋转&lt;/title&gt;    &lt;style&gt;        html &#123;            perspective: 800px;        &#125;        .cube &#123;            width: 200px;            height: 200px;            margin: 200px auto;            position: relative;            transform-style: preserve-3d;            animation: rotate 2s linear infinite;        &#125;        .cube&gt;div &#123;            width: 200px;            height: 200px;            opacity: 0.7;            position: absolute;        &#125;        img &#123;            vertical-align: top;        &#125;        .box1 &#123;            transform: rotateY(90deg) translateZ(100px);        &#125;        .box2 &#123;            transform: rotateY(-90deg) translateZ(100px);        &#125;        .box3 &#123;            transform: rotateX(90deg) translateZ(100px);        &#125;        .box4 &#123;            transform: rotateX(-90deg) translateZ(100px);        &#125;        .box5 &#123;            transform: rotateY(180deg) translateZ(100px)        &#125;        .box6 &#123;            transform: rotateY(0deg) translateZ(100px);        &#125;        @keyframes rotate &#123;            form&#123;                transform:rotateX(0) rotateZ(0)            &#125;            to&#123;                transform:rotateX(1turn) rotateZ(1turn)            &#125;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;cube&quot;&gt;        &lt;div class=&quot;box1&quot;&gt;            &lt;img src=&quot;./img/img/14/1.jpg&quot; alt=&quot;&quot;&gt;        &lt;/div&gt;        &lt;div class=&quot;box2&quot;&gt;            &lt;img src=&quot;./img/img/14/2.jpg&quot; alt=&quot;&quot;&gt;        &lt;/div&gt;        &lt;div class=&quot;box3&quot;&gt;            &lt;img src=&quot;./img/img/14/3.jpg&quot; alt=&quot;&quot;&gt;        &lt;/div&gt;        &lt;div class=&quot;box4&quot;&gt;            &lt;img src=&quot;./img/img/14/4.jpg&quot; alt=&quot;&quot;&gt;        &lt;/div&gt;        &lt;div class=&quot;box5&quot;&gt;            &lt;img src=&quot;./img/img/14/5.jpg&quot; alt=&quot;&quot;&gt;        &lt;/div&gt;        &lt;div class=&quot;box6&quot;&gt;            &lt;img src=&quot;./img/img/14/6.jpg&quot; alt=&quot;&quot;&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS动画效果之transition、animation</title>
      <link href="/2020/1218/c4a5188e.html"/>
      <url>/2020/1218/c4a5188e.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS动画效果之transition、animation"><a href="#CSS动画效果之transition、animation" class="headerlink" title="CSS动画效果之transition、animation"></a>CSS动画效果之transition、animation</h1><h2 id="过渡效果transition"><a href="#过渡效果transition" class="headerlink" title="过渡效果transition"></a>过渡效果transition</h2><blockquote><p>&emsp;&emsp;<strong>过渡（transition）</strong>效果指的是CSS属性从一个值变到另一个值时的切换方式，使用过渡可以创建一些非常好的效果，提升用户的体验。<br>&emsp;&emsp;<strong>过渡效果设置步骤：</strong><br>&emsp;&emsp;1、在想加过渡效果的元素中设置过渡的起点和过渡效果的实现方式；<br>&emsp;&emsp;2、在触发过渡行为时设置过渡的终点。<br>&emsp;&emsp;<strong>设置过渡效果的属性：</strong>  </p><blockquote><ul><li><strong>transition-property：</strong>指定要执行过渡的属性，多个属性之间用英文逗号分隔。在CSS中，绝大多数属性都是可以设置过渡效果的（实际上可以理解为只要能设置具体数值的属性都可以设置过渡效果）。如果所有属性都要设置过渡效果，则可以使用关键字<code>all</code>。</li></ul></blockquote><ul><li><strong>transition-duration：</strong>指定过渡效果执行的时间，时间单位可以是秒（s）或毫秒（ms）。其中，<code>1s = 1000ms</code>。</li><li><strong>transition-timing-function：</strong>设置过渡效果执行的时序函数，也就是设置过渡效果的执行方式。<blockquote><blockquote><p>可选值有：<br>1、 <code>ease</code>：默认值，过渡效果慢速开始，即先加速，再减速；<br>2、 <code>linear</code>：线性执行，即过渡效果匀速运动；<br>3、 <code>ease-in</code>：过渡效果加速运动；<br>4、 <code>ease-out</code>：过渡效果减速运动；<br>5、 <code>ease-in-out</code>：过渡效果先加速后减速；<br>6、 <code>cubic-bezier()</code>：使用贝塞尔曲线设置过渡方式，值的设定请查阅<a href="https://cubic-bezier.com/">https://cubic-bezier.com</a>；<br>7、 <code>steps(step, end/start)</code>：分布执行过渡效果，将过渡效果从时间上划分为<code>transition-duration / step</code>这几个时间间隔。其中，第一个值是过渡的步数，第二个值可以是 end 或 start，end 是默认值。第二个值设为end表示分步过渡效果在时间间隔结束时执行；如果设置为start，则表示过渡效果在时间间隔刚开始时就执行。例如，transition-duration为2s，steps(2,end)，表示的是在总共分两步完成过渡，第一步在1s刚结束时发生，第二步在2s刚结束时发生；start则相反。  </p></blockquote></blockquote></li><li><strong>transition-delay：</strong>设置过渡效果在触发时，还要延迟多久再发生。 </li></ul><p><strong>过渡效果的简写属性：</strong><code>transition</code> 是过渡效果的简写属性，上面的所有属性都可以简写在该属性中，属性之间用空格隔开即可，并且属性之间无顺序要求，只要注意如果要设置过渡延迟效果的话，则延迟时间是第二个时间。</p></blockquote><h2 id="动画animation"><a href="#动画animation" class="headerlink" title="动画animation"></a>动画animation</h2><blockquote><p>&emsp;&emsp;<strong>动画（animation）</strong>和过渡十分相似，不同的是在默认情况下它不需要指定触发行为就可以发生。<br>&emsp;&emsp;<strong>动画的使用步骤：</strong></p></blockquote><ol><li><p>设置动画关键帧；</p></li><li><p>在需要添加动画的元素中设置动画。<br>&emsp;&emsp;<strong>关键帧</strong>设置语法：<code>使用keyframes</code>关键字设置,<code>name</code>是动画名字。  </p><p> @keyframes name {</p><pre><code> /* from表示动画的开始位置（状态） 也可以使用 0% */ from&#123;     margin-left: 0;     background-color: orange; &#125;  /* to动画的结束位置（状态） 也可以使用100%*/ to&#123;     background-color: red;     margin-left: 700px; &#125;</code></pre><p> }</p></li></ol><blockquote><p><strong>动画animation的详细属性：</strong></p><blockquote><ul><li><strong>animation-name：</strong>要设置的动画的名字，这个名字从创建关键帧时的名字中选取。</li></ul></blockquote><ul><li><strong>animation-duration：</strong>设置动画的执行时间。</li><li><strong>animation-delay：</strong>设置动画执行之前的延迟时间。</li><li><strong>animation-timing-function：</strong>设置动画执行的方式（以上四个动画属性和过渡效果的属性用法一致）。</li><li><strong>animation-iteration-count：</strong>设置动画执行的次数，值可以是阿拉伯数字或 <code>infinite</code> 无限执行。</li><li><strong>animatio-direction：</strong>指定动画执行的方向。  <blockquote><blockquote><p>可选值有：<br>1、 <strong>normal</strong> 默认值，从from向to方向执行，每次都是这样；<br>2、 <strong>reverse</strong> 从to向from方向执行；<br>3、 <strong>alternate</strong> 从from向to方向交替执行；<br>4、 <strong>alternate-reverse</strong> 从to向from方向交替执行。  </p></blockquote></blockquote></li></ul></blockquote><blockquote><blockquote><ul><li><strong>animation-play-state：</strong>设置动画的状态，可选值有 <code>running</code> 默认值，动画执行以及 <code>paused</code> 动画暂停。</li></ul></blockquote><ul><li><strong>animation-fill-mode：</strong>动画的填充模式。<blockquote><blockquote><p>可选值有：<br>1、 <strong>none</strong> 默认值，动画执行完毕元素会回到原来的位置，但需要注意的是，动画延时等待时，元素不会处于关键帧开始状态，而是原来状态；<br>2、 <strong>forwards</strong> 动画执行完毕后元素会停在动画结束的位置；<br>3、 <strong>backwards</strong> 动画执行完毕时，停留在开始位置。但需要注意的是，动画延时等待时，元素就会处于关键帧开始状态。<br>4、 <strong>both</strong> 结合了forwards和backwards，即延时等待时，元素就处于关键帧开始状态，动画结束时，元素停留在动画最后一帧。</p></blockquote></blockquote></li></ul></blockquote><blockquote><p><strong>动画的简写属性</strong> <code>animation</code>，用法和过渡效果一致，详细属性无顺序要求，注意两个时间的顺序即可。</p></blockquote><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="练习1：使用transition实现米兔行走的效果"><a href="#练习1：使用transition实现米兔行走的效果" class="headerlink" title="练习1：使用transition实现米兔行走的效果"></a>练习1：使用transition实现米兔行走的效果</h3><p>&emsp;&emsp;最终效果为<br><img src="https://s1.imagehub.cc/images/2020/12/18/01.gif" alt="米兔行走效果图"><br>&emsp;&emsp;练习图片资源<a href="https://s1.imagehub.cc/images/2020/12/18/bigtap-mitu-queue-big.png">下载</a><br>&emsp;&emsp;参考代码：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        .rabbit&#123;            width: 132px;            height: 271px;            margin: 50px auto;            background-image: url(./img/img/11/bigtap-mitu-queue-big.png);            background-position: 0 0;            transition: all steps(3) 0.2s;        &#125;        .rabbit:hover&#123;            background-position: -396px 0;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;rabbit&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="练习2：实现卡通人物的奔跑效果。"><a href="#练习2：实现卡通人物的奔跑效果。" class="headerlink" title="练习2：实现卡通人物的奔跑效果。"></a>练习2：实现卡通人物的奔跑效果。</h3><p>&emsp;&emsp;最终效果为<br><img src="https://s1.imagehub.cc/images/2020/12/18/02.gif" alt="奔跑动画效果图"><br>&emsp;&emsp;练习图片资源<a href="https://s1.imagehub.cc/images/2020/12/18/bg2.png">下载</a><br>&emsp;&emsp;参考代码：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        .box1&#123;            width: 256px;            height: 256px;            margin: 50px auto;            background-image: url(./img/img/12/bg2.png);            animation: run 3s steps(6) infinite;        &#125;        @keyframes run &#123;            from&#123;                background-position: 0 0;            &#125;            to&#123;                background-position: -1536px 0;            &#125;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown使用</title>
      <link href="/2020/1216/28cddff3.html"/>
      <url>/2020/1216/28cddff3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown使用"><a href="#Markdown使用" class="headerlink" title="Markdown使用"></a>Markdown使用</h1><h2 id="Markdown标题"><a href="#Markdown标题" class="headerlink" title="Markdown标题"></a>Markdown标题</h2><ul><li>使用’ = ‘和’ - ‘标记一级标题和二级标题<h1 id="我展示的是一级标题（只要下方有一个等号即可）"><a href="#我展示的是一级标题（只要下方有一个等号即可）" class="headerlink" title="我展示的是一级标题（只要下方有一个等号即可）"></a>我展示的是一级标题（只要下方有一个等号即可）</h1></li></ul><h2 id="我展示的是二级标题"><a href="#我展示的是二级标题" class="headerlink" title="我展示的是二级标题"></a>我展示的是二级标题</h2><ul><li>使用’ # ‘号的个数来标记标题的级别，有1~6这六个级别的标题，#个数越多，代表标题级别越低。</li></ul><h2 id="Markdown段落"><a href="#Markdown段落" class="headerlink" title="Markdown段落"></a>Markdown段落</h2><p>Markdown段落没有特殊的格式，直接编写文字就好。<br><strong>段落换行：</strong>使用两个以上的空格加回车，然后在该行输入文字，即可实现段落的换行。<br><font color=red>注意，这种做法是实现换行，两行之间并没有空一行；</font><br><strong>两行之间空一行：</strong>输入文字时在两行之间空一行。</p><h2 id="Markdown字体"><a href="#Markdown字体" class="headerlink" title="Markdown字体"></a>Markdown字体</h2><ul><li>斜体<ol><li>使用两个星号*将文字包裹起来，可实现斜体；</li><li>使用英文输入法的两个下划线_也可实现斜体；</li></ol></li><li>文本加粗<ol><li>左右均使用两个星号*包裹文字，可实现文字加粗效果；</li><li>左右均使用英文输入法的两个下划线_也可实现文本的加粗效果。</li></ol></li><li>粗斜体文本<ol><li>左右各使用三个星号*将文字包裹，可实现粗斜体文本；</li><li>左右各使用英文输入法的三个下划线_，也可实现粗斜体文本。<br><img src="https://s1.imagehub.cc/images/2020/12/16/149f065fc241fe142.png" alt="字体效果"></li></ol></li></ul><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。<br><img src="https://s1.imagehub.cc/images/2020/12/16/2.png" alt="分割线效果"></p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以通过 HTML 的 u 标签来实现：<br><img src="https://s1.imagehub.cc/images/2020/12/16/3.png" alt="下划线效果"></p><h2 id="Markdown列表"><a href="#Markdown列表" class="headerlink" title="Markdown列表"></a>Markdown列表</h2><p>Markdown 支持有序列表和无序列表。  </p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表使用星号、加号或是减号作为列表标记，这些标记后面要添加一个空格，然后再填写内容：<br><img src="https://s1.imagehub.cc/images/2020/12/16/4.png" alt="无序列表效果"></p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表使用数字并加上 . 号来表示，如：<br><img src="https://s1.imagehub.cc/images/2020/12/16/5a94e9ca455f38b74.png" alt="有序列表效果"></p><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：<br><img src="https://s1.imagehub.cc/images/2020/12/16/6.png" alt="列表嵌套效果"></p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>使用HTML的del标签实现。<br><del>删除文字</del></p><h2 id="Markdown区块"><a href="#Markdown区块" class="headerlink" title="Markdown区块"></a>Markdown区块</h2><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号。<br><img src="https://s1.imagehub.cc/images/2020/12/16/7813e7c0a782e3937.png" alt="区块效果"><br>另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推。<br><img src="https://s1.imagehub.cc/images/2020/12/16/8.png" alt="区块嵌套效果"></p><h2 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h2><p>具体用法见下面实例：<br><img src="https://s1.imagehub.cc/images/2020/12/16/9b3a394c0fe1c1c14.png" alt="区块中使用列表"></p><h2 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h2><p>如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。区块中使用列表实例如下：<br><img src="https://s1.imagehub.cc/images/2020/12/16/10.png" alt="列表中使用区块"></p><h2 id="Markdown代码"><a href="#Markdown代码" class="headerlink" title="Markdown代码"></a>Markdown代码</h2><ul><li>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`）。</li><li>代码区块：代码区块使用 4 个空格或者一个制表符（Tab 键）来包裹代码；也可以使用三对反引号来包裹代码块。</li></ul><h2 id="Markdown链接"><a href="#Markdown链接" class="headerlink" title="Markdown链接"></a>Markdown链接</h2><p>链接的使用方法为：<code>[链接名称](链接地址)</code>或<code>&lt;链接地址&gt;</code>，两个实例分别为：<br><a href="https://qishengx.github.io/">徐齐胜的博客</a>、<a href="https://qishengx.github.io/">https://qishengx.github.io/</a><br><strong>高级链接：</strong>通过变量来设置链接，变量赋值在文档末尾进行。一个实例为：<br><img src="https://s1.imagehub.cc/images/2020/12/16/11.png" alt="高级链接案例"></p><h2 id="Markdown图片"><a href="#Markdown图片" class="headerlink" title="Markdown图片"></a>Markdown图片</h2><p>Markdown语法格式为：  </p><ul><li>开头一个感叹号 !;  </li><li>接着一个方括号，里面放上图片的替代文字;  </li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。<br><img src="https://s1.imagehub.cc/images/2020/12/16/12.png" alt="Markdown图片语法"><br>当然，你也可以像网址那样对图片网址使用变量:<br><img src="https://s1.imagehub.cc/images/2020/12/16/13d6306a3946c9193b.png" alt="图片的高级用法"><br><font color=red>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</font></li></ul><h2 id="Markdown表格"><a href="#Markdown表格" class="headerlink" title="Markdown表格"></a>Markdown表格</h2><blockquote><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。语法格式如下：<br><img src="https://s1.imagehub.cc/images/2020/12/16/14.png" alt="Markdown表格语法规则"></p><blockquote><p>表格对齐方式<br>我们可以设置表格的对齐方式：<br>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐。<br>实例如下：<br><img src="https://s1.imagehub.cc/images/2020/12/16/15.png" alt="表格实例"></p></blockquote></blockquote><h2 id="Markdown高级技巧"><a href="#Markdown高级技巧" class="headerlink" title="Markdown高级技巧"></a>Markdown高级技巧</h2><ul><li>支持HTML元素：不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</li><li>转义：Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠 \ 转义特殊字符。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>- [1] <a href="https://www.runoob.com/markdown/md-tutorial.html">菜鸟教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 文本编辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端概述</title>
      <link href="/2020/1215/dbc0e3b9.html"/>
      <url>/2020/1215/dbc0e3b9.html</url>
      
        <content type="html"><![CDATA[<h2 id="网站逻辑介绍"><a href="#网站逻辑介绍" class="headerlink" title="网站逻辑介绍"></a>网站逻辑介绍</h2><p>前端分为客户端与服务器。其中，客户端是通过浏览器解析前端工程师所写的网页源码来实现（我们日常的上网所浏览的网页都是基于这个逻辑的），服务器主要处理前端的请求并返回结果响应。<br>前端页面所涉及的核心技术为HTML（超文本标记语言）、CSS（层叠样式表）和JavaScript。其中，HTML是网页骨架，CSS控制网页的显示样式，JavaScript控制网页的行为（这三种技术一般称为“结构—样式—行为”）。</p><h2 id="前端学习路线"><a href="#前端学习路线" class="headerlink" title="前端学习路线"></a>前端学习路线</h2><p>学习Web开发一般可以按照先学HTML，然后学习CSS，最后再学Javascript这样的顺序进行。当然，需要注意的是，初学阶段，在学习HTML时，主要以对各个标签熟悉为主。对于暂时理解不了的知识不要过于纠结，随着学习的深入这些疑问才能慢慢理解，比如HTML表单，在没有学习JavaScript以及后端的知识时，很难完全理解表单的运行逻辑；在学习CSS时，同样是以熟悉各个CSS熟悉为主，不必要求一下子要记住所有的属性，但务必要将各个属性的原理理解清楚，比如外边距折叠、高度塌陷等问题是怎么产生的；到了学习JavaScript时，不仅要学习它的理论知识，还要勤于动手，在练习实践中学习、理解知识。  </p><p>最后，在学习这三部分内容时，一定要耐下心来，把每个知识点都过一遍，多多练习。这三部分知识是整个网页前端的基础和核心。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
